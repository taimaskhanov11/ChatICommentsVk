from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from loguru import logger

from chaticommentsvk.apps.bot import markups
from chaticommentsvk.apps.bot.utils.queue_helpers import send_current_queues
from chaticommentsvk.apps.vk.classes import Request
from chaticommentsvk.db.db_main import temp


class AddPostGroupStates(StatesGroup):
    add = State()


async def customize_queue_menu(message: types.Message, state: FSMContext):
    await state.finish()
    await send_current_queues(message)
    await message.answer(
        "–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—å—Å—è —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π –≤ –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞",
        reply_markup=markups.add_post_keyboard,
    )


async def add_post_start(call: types.CallbackQuery):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ url –ø–æ—Å—Ç–∞")
    await AddPostGroupStates.first()


async def add_post(message: types.Message, state: FSMContext):
    request = await Request.parse_url(message)
    if request:
        temp.current_posts.append(request)
        await message.answer("–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
        await state.finish()
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")


async def delete_post(call: types.CallbackQuery):
    url = call.data[12:]
    for p in temp.current_posts:
        if url == p:
            await call.bot.delete_message(p.chat_id, p.message_id)
            temp.current_posts.remove(url)
            await call.message.delete()
            await call.message.answer(f"–ü–æ—Å—Ç {url} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            logger.info(f"–ü–æ—Å—Ç {url} —É–¥–∞–ª–µ–Ω")
            break
    # if url in temp.current_posts:
    #     temp.current_posts.remove(url)
    #     await call.message.answer("–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
    #     logger.info(f"–ü–æ—Å—Ç {url} —É–¥–∞–ª–µ–Ω")
    else:
        await call.message.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—á–µ—Ä–µ–¥–∏")


def register_customize_queue_handlers(dp: Dispatcher):
    dp.register_message_handler(customize_queue_menu, text_startswith="üî©", state="*")
    dp.register_callback_query_handler(delete_post, text_startswith="delete_post")
    dp.register_callback_query_handler(add_post_start, text_startswith="add_post")
    dp.register_message_handler(add_post, state=AddPostGroupStates)
